{"version":3,"file":"see-fetch.umd.js","sources":["../src/share.js","../src/setting.js","../src/util/logger.js","../src/fetch_handle.js","../src/post_handle.js","../src/post_fetch_handle.js","../src/send.js","../src/util/make_search.js","../src/util/make_url_search_params.js","../src/index.js","../src/config.js","../src/set_env.js","../src/get_env.js","../src/set.js"],"sourcesContent":["export default {\n  // Application options.\n  optionsCollection: {},\n  // Environment, default is 0.\n  env: 0,\n};\n","export default {\n  // Error field when response status is `3XX, 4XX, 5XX`.\n  errorField: 'error',\n  // Whether current mode is debug.\n  debug: !0,\n};\n","const prefix = 'see-fetch: ';\n\nexport const log = (str, ...rest) => {\n  console.log(prefix + str, ...rest);\n};\n\nexport const info = (str, ...rest) => {\n  console.info(prefix + str, ...rest);\n};\n\nexport const warn = (str, ...rest) => {\n  console.warn(prefix + str, ...rest);\n};\n\nexport const error = (str, ...rest) => {\n  console.error(prefix + str, ...rest);\n};\n\nexport const throwError = str => {\n  throw new Error(prefix + str);\n};\n","import setting from './setting';\n\nexport default function(res) {\n  // Has error\n  if (res.status >= 300) return { [setting.errorField]: !0, response: res };\n\n  return res.json();\n}\n","import JSONRefactor from 'json-refactor';\n\nimport share from './share';\n\n/**\n * Post handling after getting response data.\n *\n * @param res Response data.\n * @param params Request params.\n * @param name Request name.\n */\nexport default function(res, params, name) {\n  // Current options.\n  const options = share.optionsCollection[name];\n  // Common options.\n  const commonOptions = share.optionsCollection.common || {};\n\n  // Index to select item.\n  const index = share.env;\n\n  // Response refactor.\n  const responseRefactor = options.responseRefactor && options.responseRefactor[index];\n  const commonResponseRefactor = commonOptions.responseRefactor && commonOptions.responseRefactor[index];\n\n  // Post handle.\n  const postHandle = options.postHandle && options.postHandle[index];\n  const commonPostHandle = commonOptions.postHandle && commonOptions.postHandle[index];\n\n  let response = res;\n\n  if (commonResponseRefactor) JSONRefactor(response, commonResponseRefactor);\n  if (responseRefactor) JSONRefactor(response, responseRefactor);\n  if (commonPostHandle) {\n    const result = commonPostHandle(response, params, name);\n\n    // If return a new object, use it.\n    if (result) response = result;\n  }\n  if (postHandle) {\n    const result = postHandle(response, params, name);\n\n    // If return a new object, use it.\n    if (result) response = result;\n  }\n\n  return response;\n}\n","import postHandle from './post_handle';\nimport setting from './setting';\n\nexport default (name, params) => res => {\n  // Has error.\n  if (res[setting.errorField]) return res;\n\n  return postHandle(res, params, name);\n};\n","import setting from './setting';\nimport share from './share';\nimport { info, error } from './util/logger';\nimport makeSearch from './util/make_search';\nimport makeUrlSearchParams from './util/make_url_search_params';\nimport fetchHandle from './fetch_handle';\nimport postFetchHandle from './post_fetch_handle';\nimport postHandle from './post_handle';\n\n/**\n * Make a request.\n *\n * @param name Defined request name.\n * @param params Request params.\n */\nexport default function(name, params) {\n  if (!name) return;\n\n  // Current options.\n  const options = share.optionsCollection[name];\n  // Common options.\n  const commonOptions = share.optionsCollection.common || {};\n\n  if (!options) {\n    error(`name '${name}' is not configured.`);\n    return;\n  }\n\n  // Index to select item.\n  const index = share.env;\n\n  // Http method, default is `GET`.\n  const method = (options.method && options.method[index]) || 'get';\n\n  // Stringify request params.\n  const stringify = (options.stringify && options.stringify[index]) || !1;\n\n  // Fetch options.\n  const settings = (options.settings && options.settings[index]) || {};\n\n  // url\n  const url = (options.url && options.url[index]) || '';\n\n  // Request keys.\n  const requestKeys = (options.requestKeys && options.requestKeys[index]) || {};\n\n  // Pre handle.\n  const preHandle = options.preHandle && options.preHandle[index];\n\n  const commonPreHandle = commonOptions.preHandle && commonOptions.preHandle[index];\n\n  // implement\n  const implement = options.implement && options.implement[index];\n\n  // Real request params.\n  let realParams = Object.assign({}, params || {});\n\n  // Request keys mapping handling.\n  Object.keys(realParams).forEach(key => {\n    const newKey = requestKeys[key];\n    if (newKey && typeof newKey === 'string') {\n      // Make a new key.\n      realParams[newKey] = realParams[key];\n      // Delete old key.\n      delete realParams[key];\n    }\n  });\n\n  // Pre handling.\n  if (commonPreHandle) {\n    const result = commonPreHandle(realParams);\n\n    // If return a new object, use it.\n    if (result) realParams = result;\n  }\n  if (preHandle) {\n    const result = preHandle(realParams);\n\n    // If return a new object, use it.\n    if (result) realParams = result;\n  }\n\n  // Custom implement.\n  if (implement) {\n    return new Promise(resolve => {\n      const callback = result => {\n        if (setting.debug) {\n          info(`custom fetch implement for '${name}', and request params is:`, realParams);\n          info(`result for '${name}' is:`, result);\n        }\n\n        resolve(postHandle(result, realParams, name));\n      };\n\n      // Use callback\n      const promise = implement(result => {\n        callback(result);\n      }, !stringify ? realParams : JSON.stringify(realParams));\n\n      // Return a Promise\n      if (promise && promise instanceof Promise)\n        promise.then(result => {\n          callback(result);\n        });\n    });\n  } else {\n    settings.method = method;\n    if (method === 'get' || method === 'GET') {\n      const newUrl = url + (url.indexOf('?') < 0 ? '?' : '&') + makeSearch(realParams);\n      return fetch(newUrl, settings)\n        .then(fetchHandle)\n        .then(postFetchHandle(name, realParams));\n    }\n\n    settings.body = stringify ? JSON.stringify(realParams) : makeUrlSearchParams(realParams);\n\n    if (method !== 'get' && method !== 'GET' && method !== 'head' && method !== 'HEAD') {\n      if (!settings.headers)\n        settings.headers = {};\n\n      if (!settings.headers['Content-Type'])\n        settings.headers['Content-Type'] = stringify ? 'application/json' : 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n\n    return fetch(url, settings)\n      .then(fetchHandle)\n      .then(postFetchHandle(name, realParams));\n  }\n}\n","/**\n * {a: 1, b: 2} => a=1&b=2\n *\n * @param params\n * @returns {string}\n */\nexport default function(params) {\n  if (!params) return '';\n\n  const search = [];\n\n  Object.keys(params).forEach(key => {\n    search.push(`${key}=${typeof params[key] === 'undefined' ? '' : params[key]}`);\n  });\n\n  return search.join('&');\n}\n","/**\n * {a: 1, b: 2} => URLSearchParam({a: 1, b: 2})\n *\n * @param params\n * @returns {URLSearchParams}\n */\nexport default function(params) {\n  const search = new URLSearchParams();\n\n  if (!params) return search;\n\n  Object.keys(params).forEach(key => {\n    search.append(key, typeof params[key] === 'undefined' ? '' : params[key]);\n  });\n\n  return search;\n}\n","import config from './config';\nimport setEnv from './set_env';\nimport getEnv from './get_env';\nimport send from './send';\nimport set from './set';\n\nsend.config = config;\nsend.setEnv = setEnv;\nsend.getEnv = getEnv;\nsend.set = set;\n\nexport default send;\n","import share from './share';\n\n/**\n * Configure application.\n *\n * @param name\n * @param options\n */\nexport default function(name, options) {\n  // One\n  if (typeof name === 'string') {\n    share.optionsCollection[name] = options;\n  }\n  // Multiple\n  else {\n    Object.keys(name).forEach(key => {\n      share.optionsCollection[key] = name[key];\n    });\n  }\n}\n","import share from './share';\n\n/**\n * Set current environment.\n */\nexport default function(env) {\n  share.env = env;\n}\n","import share from './share';\n\n/**\n * Get current environment.\n */\nexport default () => share.env;\n","import setting from './setting';\n\nexport default function(params) {\n  if (!params) return;\n\n  Object.keys(params).forEach(key => {\n    setting[key] = params[key];\n  });\n}\n"],"names":["optionsCollection","env","errorField","debug","info","str","console","rest","error","res","status","setting","response","json","params","name","const","options","share","commonOptions","common","index","responseRefactor","commonResponseRefactor","postHandle","commonPostHandle","JSONRefactor","result","method","stringify","settings","url","requestKeys","preHandle","commonPreHandle","implement","realParams","Object","assign","keys","forEach","key","newKey","Promise","resolve","callback","promise","JSON","then","newUrl","indexOf","search","push","join","makeSearch","fetch","fetchHandle","postFetchHandle","body","URLSearchParams","append","makeUrlSearchParams","headers","send","config","setEnv","getEnv","set"],"mappings":"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"}